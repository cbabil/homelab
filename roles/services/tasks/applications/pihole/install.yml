---
- name: Check if Pi-hole is already installed
  stat:
    path: /usr/local/bin/pihole
  register: pihole_binary

- name: Check Pi-hole service status
  stat:
    path: /etc/init.d/pihole-FTL
  register: pihole_service
  when: pihole_binary.stat.exists

- name: Install and Configure Pi-hole
  block:
    - name: Install Pi-hole Prerequisites
      apt:
        name:
          - curl
          - git
          - iproute2
          - whiptail
        state: present
        update_cache: yes

    - name: Create temporary directory for Pi-hole
      tempfile:
        state: directory
        suffix: pihole
      register: temp_dir

    - name: Download Pi-hole install script
      get_url:
        url: https://install.pi-hole.net
        dest: "{{ temp_dir.path }}/basic-install.sh"
        mode: '0755'

    - name: Create Pi-hole configuration file
      copy:
        dest: "{{ temp_dir.path }}/setupVars.conf"
        content: |
          PIHOLE_INTERFACE={{ network_interface | default('eth0') }}
          IPV4_ADDRESS={{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}
          QUERY_LOGGING=true
          INSTALL_WEB_SERVER=true
          INSTALL_WEB_INTERFACE=true
          LIGHTTPD_ENABLED=true
          WEBPASSWORD={{ pihole_password | password_hash('sha512') }}
          BLOCKING_ENABLED=true

    - name: Install Pi-hole
      command:
        cmd: "bash basic-install.sh --unattended"
        chdir: "{{ temp_dir.path }}"
      environment:
        PIHOLE_SKIP_OS_CHECK: true
      register: install_result
      failed_when: install_result.rc != 0 or 'Installation Complete!' not in install_result.stdout

    - name: Clean up temporary files
      file:
        path: "{{ temp_dir.path }}"
        state: absent

    - name: Ensure Pi-hole service is running
      systemd:
        name: pihole-FTL
        state: started
        enabled: yes

    - name: Update Pi-hole gravity
      command: pihole -g
      changed_when: false
  
  when: 
    - not pihole_binary.stat.exists
    - not (pihole_service.stat.exists | default(false))